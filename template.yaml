AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Template for Aho Cultural Lambdas

Mappings:
  EnvironmentMap:
    qa:
      Domain: qa.ahocultural.com
      BucketName: ahocultural-static-qa
      AssetsBucketName: ahocultural-assets-qa
      MinTTL: 300
      DefaultTTL: 86400
      MaxTTL: 31536000
    prod:
      Domain: ahocultural.com
      BucketName: ahocultural-static-prod
      AssetsBucketName: ahocultural-assets-prod
      MinTTL: 300
      DefaultTTL: 86400
      MaxTTL: 31536000
Parameters:
  Environment:
    Type: String
    AllowedValues:
      - qa
      - prod
  CertificateId:
    Type: String
    Description: SSL Certificate Identification for API Gateway Webhook
Resources:
  ## Database Bucket
  DatabaseBucket:
    Type: AWS::S3::Bucket
    Properties: 
      BucketName: !Sub ahocultural-database-${Environment}
      AccessControl: Private

  ## API
  ApiGateway:
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      Description: Aho Cultural Api Gateway
      Name: !Sub AhoCultural-${Environment}
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Centro-Custo
          Value: ApiGateway
        - Key: Centro-Custo-Servico
          Value: AhoCultural
  V1Resource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: v1
  V1MethodOptions:
    Type: 'AWS::ApiGateway::Method'
    Properties: 
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref V1Resource
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
      Integration:
        IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'*'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
          ResponseTemplates:
            application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK

  # CORS Gateway Responses
  Default4XXGatewayResponse:
    Type: AWS::ApiGateway::GatewayResponse
    Properties:
      RestApiId: !Ref ApiGateway
      ResponseType: DEFAULT_4XX
      ResponseParameters:
        gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
        gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        gatewayresponse.header.Access-Control-Allow-Methods: "'*'"
  Default5XXGatewayResponse:
    Type: AWS::ApiGateway::GatewayResponse
    Properties:
      RestApiId: !Ref ApiGateway
      ResponseType: DEFAULT_5XX
      ResponseParameters:
        gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
        gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        gatewayresponse.header.Access-Control-Allow-Methods: "'*'"
  UnauthorizedGatewayResponse:
    Type: AWS::ApiGateway::GatewayResponse
    Properties:
      RestApiId: !Ref ApiGateway
      ResponseType: UNAUTHORIZED
      ResponseParameters:
        gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
        gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        gatewayresponse.header.Access-Control-Allow-Methods: "'*'"
  AccessDeniedGatewayResponse:
    Type: AWS::ApiGateway::GatewayResponse
    Properties:
      RestApiId: !Ref ApiGateway
      ResponseType: ACCESS_DENIED
      ResponseParameters:
        gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
        gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        gatewayresponse.header.Access-Control-Allow-Methods: "'*'"
  MissingAuthTokenGatewayResponse:
    Type: AWS::ApiGateway::GatewayResponse
    Properties:
      RestApiId: !Ref ApiGateway
      ResponseType: MISSING_AUTHENTICATION_TOKEN
      ResponseParameters:
        gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
        gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        gatewayresponse.header.Access-Control-Allow-Methods: "'*'"

  ApiGatewayDeployment:
    Type: 'AWS::ApiGateway::Deployment'
    DependsOn:
      - V1Resource
      - V1MethodOptions
    Properties:
      RestApiId: !Ref ApiGateway
      StageName: !Ref Environment
  ApiGatewayDomain:
    Type: AWS::ApiGateway::DomainName
    Properties: 
      RegionalCertificateArn: !Sub arn:aws:acm:${AWS::Region}:${AWS::AccountId}:certificate/${CertificateId}
      DomainName: !Sub 
          - api.${Domain}
          - Domain: !FindInMap [EnvironmentMap, !Ref Environment, Domain]
      EndpointConfiguration:
        Types:
          - REGIONAL
      Tags:
        - Key: Environment
          Value: !Ref 'Environment'
        - Key: Centro-Custo
          Value: ApiGateway
        - Key: Centro-Custo-Servico
          Value: AhoCultural
  ApiGatewayMapping:
    Type: AWS::ApiGateway::BasePathMapping
    DependsOn:
      - ApiGatewayDeployment
      - ApiGatewayDomain
    Properties: 
      DomainName: !Ref ApiGatewayDomain
      RestApiId: !Ref ApiGateway
      Stage: !Ref Environment
  RecordSetGroup:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneName: !Join ['', [!FindInMap [EnvironmentMap, !Ref 'Environment', Domain], '.']]
      RecordSets: 
        - Name: !Ref ApiGatewayDomain
          Type: A
          AliasTarget:
            HostedZoneId: !GetAtt ApiGatewayDomain.RegionalHostedZoneId
            DNSName: !GetAtt ApiGatewayDomain.RegionalDomainName

  ## CloudFront
  AssetsBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !FindInMap [EnvironmentMap, !Ref Environment, AssetsBucketName]
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerEnforced
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        IgnorePublicAcls: true
        BlockPublicPolicy: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      CorsConfiguration:
        CorsRules:
          - AllowedOrigins:
              - "http://localhost:5173"
              - "http://127.0.0.1:5173"
              - "http://localhost:3000"
              - "http://127.0.0.1:3000"
              - "https://qa.ahocultural.com"
            AllowedMethods: [PUT, GET, HEAD]
            AllowedHeaders: ["*"]
            ExposedHeaders: [ETag, x-amz-request-id, x-amz-version-id]
            MaxAge: 3000
      LifecycleConfiguration:
        Rules:
          - Id: ExpireTempObjectsAfter1Day
            Status: Enabled
            TagFilters:
              - Key: temp
                Value: "true"
            ExpirationInDays: 1
            NoncurrentVersionExpirationInDays: 1
          - Id: AbortIncompleteMPUsAfter1Day
            Status: Enabled
            Prefix: ""                       # aplica no bucket todo
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 1
  StaticBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !FindInMap [EnvironmentMap, !Ref Environment, BucketName]
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerEnforced
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        IgnorePublicAcls: true
        BlockPublicPolicy: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
  StaticOAC:
    Type: AWS::CloudFront::OriginAccessControl
    DependsOn:
      - StaticBucket
    Properties:
      OriginAccessControlConfig:
        Name: !Sub 
          - oac-${BucketName}*
          - BucketName: !FindInMap [EnvironmentMap, !Ref Environment, BucketName]
        OriginAccessControlOriginType: s3
        SigningProtocol: sigv4
        SigningBehavior: always
        Description: Access S3 via SigV4 from CloudFront
  CloudFront:
    Type: AWS::CloudFront::Distribution
    DependsOn:
      - StaticBucket
    Properties: 
      DistributionConfig:
        DefaultRootObject: index.html
        Comment: CloudFront for Static Applications
        Enabled: true
        HttpVersion: http2
        IPV6Enabled: true
        ViewerCertificate:
          AcmCertificateArn: !Sub arn:aws:acm:${AWS::Region}:${AWS::AccountId}:certificate/${CertificateId}
          SslSupportMethod: sni-only
          MinimumProtocolVersion: TLSv1.2_2021
        Aliases:
          - !FindInMap [EnvironmentMap, !Ref Environment, Domain]
        DefaultCacheBehavior:
          TargetOriginId: 
            !Sub 
              - s3-${BucketName}
              - BucketName: !FindInMap [EnvironmentMap, !Ref Environment, BucketName]
          ForwardedValues:
            Headers:
              - bot
            QueryString: true
            Cookies: 
                Forward: none
          ViewerProtocolPolicy: redirect-to-https
          MinTTL: !FindInMap [EnvironmentMap, !Ref Environment, MinTTL]
          AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
              - PUT
              - PATCH
              - POST
              - DELETE
          SmoothStreaming: false
          DefaultTTL: !FindInMap [EnvironmentMap, !Ref Environment, DefaultTTL]
          MaxTTL: !FindInMap [EnvironmentMap, !Ref Environment, MaxTTL]
          Compress: true
        CacheBehaviors:
          -
            TargetOriginId: 
              !Sub 
                - s3-${AssetsBucketName}
                - AssetsBucketName: !FindInMap [EnvironmentMap, !Ref Environment, AssetsBucketName]
            ForwardedValues:
              Headers:
                - bot
              QueryString: true
              Cookies: 
                  Forward: none
            ViewerProtocolPolicy: redirect-to-https
            MinTTL: !FindInMap [EnvironmentMap, !Ref Environment, MinTTL]
            AllowedMethods:
                - GET
                - HEAD
                - OPTIONS
                - PUT
                - PATCH
                - POST
                - DELETE
            SmoothStreaming: false
            DefaultTTL: !FindInMap [EnvironmentMap, !Ref Environment, DefaultTTL]
            MaxTTL: !FindInMap [EnvironmentMap, !Ref Environment, MaxTTL]
            Compress: true
            PathPattern: !Sub /assets*
        Origins: 
          - 
            Id: 
              !Sub 
                - s3-${BucketName}
                - BucketName: !FindInMap [EnvironmentMap, !Ref Environment, BucketName]
            DomainName: 
              !Sub 
                - ${BucketName}.s3.amazonaws.com
                - BucketName: !FindInMap [EnvironmentMap, !Ref Environment, BucketName]
            S3OriginConfig: {}
            OriginAccessControlId: !Ref StaticOAC
          - 
            Id: 
              !Sub 
                - s3-${AssetsBucketName}
                - AssetsBucketName: !FindInMap [EnvironmentMap, !Ref Environment, AssetsBucketName]
            DomainName: 
              !Sub 
                - ${AssetsBucketName}.s3.amazonaws.com
                - AssetsBucketName: !FindInMap [EnvironmentMap, !Ref Environment, AssetsBucketName]
            S3OriginConfig: {}
            OriginAccessControlId: !Ref StaticOAC
  RecordSetLinktou:
    Type: AWS::Route53::RecordSet
    DependsOn:
      - CloudFront
    Properties: 
      Name: !FindInMap [EnvironmentMap, !Ref Environment, Domain]
      Type: A
      HostedZoneName: 
        !Sub 
          - ${Domain}.
          - Domain: !FindInMap [EnvironmentMap, !Ref Environment, Domain]
      AliasTarget: 
        DNSName: !GetAtt CloudFront.DomainName
        HostedZoneId: Z2FDTNDATAQYW2
  StaticBucketPolicy:
    Type: AWS::S3::BucketPolicy
    DependsOn:
      - CloudFront
    Properties:
      Bucket: !Ref StaticBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: DenyInsecureTransport
            Effect: Deny
            Principal: "*"
            Action: "s3:*"
            Resource:
              - !Sub 
                - arn:aws:s3:::${BucketName}
                - BucketName: !FindInMap [EnvironmentMap, !Ref Environment, BucketName]
              - !Sub 
                - arn:aws:s3:::${BucketName}/*
                - BucketName: !FindInMap [EnvironmentMap, !Ref Environment, BucketName]
            Condition:
              Bool:
                aws:SecureTransport: "false"

          - Sid: AllowCloudFrontOACRead
            Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Action: s3:GetObject
            Resource: 
              - !Sub 
                - arn:aws:s3:::${BucketName}/*
                - BucketName: !FindInMap [EnvironmentMap, !Ref Environment, BucketName]
            Condition:
              StringEquals:
                aws:SourceArn: 
                  !Sub
                    - arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistributionId}
                    - CloudFrontDistributionId: !Ref CloudFront
  AssetsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    DependsOn:
      - CloudFront
    Properties:
      Bucket: !Ref AssetsBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: DenyInsecureTransport
            Effect: Deny
            Principal: "*"
            Action: "s3:*"
            Resource:
              - !Sub 
                - arn:aws:s3:::${AssetsBucketName}
                - AssetsBucketName: !FindInMap [EnvironmentMap, !Ref Environment, AssetsBucketName]
              - !Sub 
                - arn:aws:s3:::${AssetsBucketName}/*
                - AssetsBucketName: !FindInMap [EnvironmentMap, !Ref Environment, AssetsBucketName]
            Condition:
              Bool:
                aws:SecureTransport: "false"

          - Sid: AllowCloudFrontOACRead
            Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Action: s3:GetObject
            Resource: 
              - !Sub 
                - arn:aws:s3:::${AssetsBucketName}/*
                - AssetsBucketName: !FindInMap [EnvironmentMap, !Ref Environment, AssetsBucketName]
            Condition:
              StringEquals:
                aws:SourceArn: 
                  !Sub
                    - arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistributionId}
                    - CloudFrontDistributionId: !Ref CloudFront
  ViewerEdgeFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./edge/viewer/
      Handler: app.handler
      Runtime: nodejs22.x
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
            - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - edgelambda.amazonaws.com
      Policies: 
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/CloudWatchFullAccess
  OriginEdgeFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./edge/origin/
      Handler: app.handler
      Runtime: nodejs22.x
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
            - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - edgelambda.amazonaws.com
      Policies: 
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/CloudWatchFullAccess

  ## Lambda Configuration
  LambdaBucket:
    Type: AWS::S3::Bucket
    Properties: 
      BucketName: !Sub ahocultural-sam-artifacts-${Environment}
      AccessControl: Private
      LifecycleConfiguration:
        Rules:
          - Id: expire-after-1d
            Status: Enabled
            Prefix: ""                  # aplica ao bucket inteiro
            ExpirationInDays: 1         # expira objetos atuais após 1 dia
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 1    # aborta uploads incompletos após 1 dia
Outputs:
  DefaultRestApiId:
    Description: 'Rest Api Id for AhoCultural Api Gateway'
    Value: !Ref ApiGateway
    Export:
      Name: 'AhoCultural-RestApiId'
  AhoCulturalV1Resource:
    Description: 'Resource of v1 from AhoCultural Api Gateway'
    Value: !Ref V1Resource
    Export:
      Name: 'AhoCultural-V1Resource'