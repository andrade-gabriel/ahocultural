AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Sample SAM Template for Public Endpoints

Mappings:
    EnvironmentMap:
      qa:
        ApiGatewayId: bjomeyg8y0
        V1Resource: mbsw8v
        AuthorizerId: 1apnn6
        OpenSearchDomain: search-ahocultural-qa-2o6wra2alh6cjmp6ycl5nzgpvy.us-east-1.es.amazonaws.com
        CdnUrl: https://qa.ahocultural.com
      prod:
        ApiGatewayId: '1111'
        V1Resource: '1111'
        AuthorizerId: '1111'
        OpenSearchDomain: '1111'
Parameters:
  Environment:
    Description: Environment where stack will be deployed
    Type: String
    AllowedValues:
    - qa
    - prod

Globals:
  Function:
    Timeout: 5
    MemorySize: 512

Resources:
  PublicResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !FindInMap [EnvironmentMap, !Ref 'Environment', ApiGatewayId]
      ParentId: !FindInMap [EnvironmentMap, !Ref 'Environment', V1Resource]
      PathPart: public
  PublicOptions:
    Type: 'AWS::ApiGateway::Method'
    Properties: 
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      RestApiId: !FindInMap [EnvironmentMap, !Ref 'Environment', ApiGatewayId]
      ResourceId: !Ref PublicResource
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
      Integration:
        IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'*'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
          ResponseTemplates:
            application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK

  ## Article
  ArticleResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !FindInMap [EnvironmentMap, !Ref 'Environment', ApiGatewayId]
      ParentId: !Ref PublicResource
      PathPart: article
  ArticleIdResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !FindInMap [EnvironmentMap, !Ref Environment, ApiGatewayId]
      ParentId:  !Ref ArticleResource
      PathPart: '{id}'
  ArticleLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .dist/
      Handler: article/app.lambdaHandler
      Runtime: nodejs22.x
      Environment:
        Variables:
          BUCKET_DATABASE: !Sub ahocultural-database-${Environment}
          OPENSEARCH_ENDPOINT: !FindInMap [EnvironmentMap, !Ref Environment, OpenSearchDomain]
          ARTICLE_INDEX: articles
      Policies: 
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - Statement:
          - Sid: ArticleLambdaIngestorOpenSearch
            Effect: Allow
            Action: 
              - es:*
            Resource:
              !Sub arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/ahocultural-${Environment}*
        - Statement:
            - Sid: ArticleLambdaS3Admin
              Effect: Allow
              Action:
                - s3:GetObject
                - s3:GetObjectTagging
                - s3:ListBucket
              Resource: 
                - !Sub 'arn:aws:s3:::ahocultural-database-${Environment}'
                - !Sub 'arn:aws:s3:::ahocultural-database-${Environment}/*'
  ArticleTrigger:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:invokeFunction'
      FunctionName: !Ref ArticleLambda
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 
        - arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayId}/*/*/v1/public/article*
        - ApiGatewayId: !FindInMap [EnvironmentMap, !Ref 'Environment', ApiGatewayId]
  ArticleGetByIdMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      ResourceId: !Ref ArticleIdResource
      RestApiId: !FindInMap [EnvironmentMap, !Ref Environment, ApiGatewayId]
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ArticleLambda.Arn}/invocations
      MethodResponses:
        - StatusCode: 200
        - StatusCode: 404
        - StatusCode: 400
        - StatusCode: 401
        - StatusCode: 500
  ArticleGetMethod:
    DependsOn: 
      - ArticleTrigger
    Type: 'AWS::ApiGateway::Method'
    Properties: 
      AuthorizationType: NONE
      HttpMethod: GET
      ResourceId: !Ref ArticleResource
      RestApiId: !FindInMap [EnvironmentMap, !Ref 'Environment', ApiGatewayId]
      MethodResponses:
        - StatusCode: 200
        - StatusCode: 204
        - StatusCode: 302
        - StatusCode: 400
        - StatusCode: 401
        - StatusCode: 500
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
          - LambdaArn: !GetAtt ArticleLambda.Arn
  ArticleOptionsMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      ResourceId: !Ref ArticleResource
      RestApiId: !FindInMap [EnvironmentMap, !Ref 'Environment', ApiGatewayId]
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'*'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Headers: true
  ArticleOptionsIdMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      ResourceId: !Ref ArticleIdResource
      RestApiId: !FindInMap [EnvironmentMap, !Ref 'Environment', ApiGatewayId]
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'*'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Headers: true
  # Article >> Related
  ArticleRelatedResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !FindInMap [EnvironmentMap, !Ref Environment, ApiGatewayId]
      ParentId:  !Ref ArticleResource
      PathPart: related
  ArticleRelatedIdResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !FindInMap [EnvironmentMap, !Ref Environment, ApiGatewayId]
      ParentId:  !Ref ArticleRelatedResource
      PathPart: '{id}'
  ArticleRelatedIdGetMethod:
    DependsOn: 
      - ArticleTrigger
    Type: 'AWS::ApiGateway::Method'
    Properties: 
      AuthorizationType: NONE
      HttpMethod: GET
      ResourceId: !Ref ArticleRelatedIdResource
      RestApiId: !FindInMap [EnvironmentMap, !Ref 'Environment', ApiGatewayId]
      MethodResponses:
        - StatusCode: 200
        - StatusCode: 204
        - StatusCode: 302
        - StatusCode: 400
        - StatusCode: 401
        - StatusCode: 500
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
          - LambdaArn: !GetAtt ArticleLambda.Arn
  ArticleRelatedIdMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      ResourceId: !Ref ArticleRelatedIdResource
      RestApiId: !FindInMap [EnvironmentMap, !Ref 'Environment', ApiGatewayId]
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'*'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Headers: true

  ## Event
  EventResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !FindInMap [EnvironmentMap, !Ref 'Environment', ApiGatewayId]
      ParentId: !Ref PublicResource
      PathPart: event
  EventIdResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !FindInMap [EnvironmentMap, !Ref Environment, ApiGatewayId]
      ParentId:  !Ref EventResource
      PathPart: '{id}'
  EventLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .dist/
      Handler: event/app.lambdaHandler
      Runtime: nodejs22.x
      Environment:
        Variables:
          BUCKET_DATABASE: !Sub ahocultural-database-${Environment}
          OPENSEARCH_ENDPOINT: !FindInMap [EnvironmentMap, !Ref Environment, OpenSearchDomain]
          EVENT_INDEX: events
          CATEGORY_INDEX: categories
      Policies: 
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - Statement:
          - Sid: EventLambdaIngestorOpenSearch
            Effect: Allow
            Action: 
              - es:*
            Resource:
              !Sub arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/ahocultural-${Environment}*
        - Statement:
            - Sid: EventLambdaS3Admin
              Effect: Allow
              Action:
                - s3:GetObject
                - s3:GetObjectTagging
                - s3:ListBucket
              Resource: 
                - !Sub 'arn:aws:s3:::ahocultural-database-${Environment}'
                - !Sub 'arn:aws:s3:::ahocultural-database-${Environment}/*'
  EventTrigger:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:invokeFunction'
      FunctionName: !Ref EventLambda
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 
        - arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayId}/*/*/v1/public/event*
        - ApiGatewayId: !FindInMap [EnvironmentMap, !Ref 'Environment', ApiGatewayId]
  EventGetByIdMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      ResourceId: !Ref EventIdResource
      RestApiId: !FindInMap [EnvironmentMap, !Ref Environment, ApiGatewayId]
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EventLambda.Arn}/invocations
      MethodResponses:
        - StatusCode: 200
        - StatusCode: 404
        - StatusCode: 400
        - StatusCode: 401
        - StatusCode: 500
  EventGetMethod:
    DependsOn: 
      - EventTrigger
    Type: 'AWS::ApiGateway::Method'
    Properties: 
      AuthorizationType: NONE
      HttpMethod: GET
      ResourceId: !Ref EventResource
      RestApiId: !FindInMap [EnvironmentMap, !Ref 'Environment', ApiGatewayId]
      MethodResponses:
        - StatusCode: 200
        - StatusCode: 204
        - StatusCode: 302
        - StatusCode: 400
        - StatusCode: 401
        - StatusCode: 500
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
          - LambdaArn: !GetAtt EventLambda.Arn
  EventOptionsMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      ResourceId: !Ref EventResource
      RestApiId: !FindInMap [EnvironmentMap, !Ref 'Environment', ApiGatewayId]
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'*'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Headers: true
  EventOptionsIdMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      ResourceId: !Ref EventIdResource
      RestApiId: !FindInMap [EnvironmentMap, !Ref 'Environment', ApiGatewayId]
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'*'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Headers: true
  # Event >> Related
  EventRelatedResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !FindInMap [EnvironmentMap, !Ref Environment, ApiGatewayId]
      ParentId:  !Ref EventResource
      PathPart: related
  EventRelatedIdResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !FindInMap [EnvironmentMap, !Ref Environment, ApiGatewayId]
      ParentId:  !Ref EventRelatedResource
      PathPart: '{id}'
  EventRelatedIdGetMethod:
    DependsOn: 
      - EventTrigger
    Type: 'AWS::ApiGateway::Method'
    Properties: 
      AuthorizationType: NONE
      HttpMethod: GET
      ResourceId: !Ref EventRelatedIdResource
      RestApiId: !FindInMap [EnvironmentMap, !Ref 'Environment', ApiGatewayId]
      MethodResponses:
        - StatusCode: 200
        - StatusCode: 204
        - StatusCode: 302
        - StatusCode: 400
        - StatusCode: 401
        - StatusCode: 500
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
          - LambdaArn: !GetAtt EventLambda.Arn
  EventRelatedIdMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      ResourceId: !Ref EventRelatedIdResource
      RestApiId: !FindInMap [EnvironmentMap, !Ref 'Environment', ApiGatewayId]
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'*'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Headers: true

  ## Deployment
  ApiGatewayDeployment:
    Type: 'AWS::ApiGateway::Deployment'
    DependsOn:
      - EventGetByIdMethod
      - EventGetMethod
      - EventOptionsMethod
      - EventOptionsIdMethod
      - ArticleGetByIdMethod
      - ArticleGetMethod
      - ArticleOptionsMethod
      - ArticleOptionsIdMethod
      - ArticleRelatedIdGetMethod
      - ArticleRelatedIdMethod
      - EventRelatedIdGetMethod
      - EventRelatedIdMethod
    Properties:
      RestApiId: !FindInMap [EnvironmentMap, !Ref 'Environment', ApiGatewayId]
      StageName: !Ref Environment