AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Sample SAM Template for Admin Endpoints

Mappings:
    EnvironmentMap:
      qa:
        ApiGatewayId: bjomeyg8y0
        V1Resource: mbsw8v
      prod:
        ApiGatewayId: '1111'
        V1Resource: '1111'
Parameters:
  Environment:
    Description: Environment where stack will be deployed
    Type: String
    AllowedValues:
    - qa
    - prod
Globals:
  Function:
    Timeout: 5
    MemorySize: 512
Resources:
  ## OpenSearch (Free Tier)
  OpenSearchDomain:
    Type: AWS::OpenSearchService::Domain
    Properties:
      DomainName: !Sub ahocultural-${Environment}         # 3–28 chars
      EngineVersion: OpenSearch_2.11                     # ajuste se quiser outra versão suportada
      ClusterConfig:
        InstanceType: t3.small.search                    # ✅ elegível Free Tier
        InstanceCount: 1                                 # single-AZ (sem AZ awareness)
        ZoneAwarenessEnabled: false
      EBSOptions:
        EBSEnabled: true
        VolumeType: gp2                                  # ✅ Free Tier menciona Magnetic / gp2
        VolumeSize: 10                                   # ✅ 10 GB
      EncryptionAtRestOptions:
        Enabled: true
      NodeToNodeEncryptionOptions:
        Enabled: true
      DomainEndpointOptions:
        EnforceHTTPS: true
        TLSSecurityPolicy: Policy-Min-TLS-1-2-2019-07
      # Acesso só por IAM (mesma conta). Se quiser VPC, troque por VPCOptions.
      AccessPolicies:
        Version: "2012-10-17"
        Statement:
          - Sid: AllowLocal
            Effect: Allow
            Principal: '*'
            # Principal:
            #   AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Action: "es:*"
            Resource: !Sub arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/ahocultural-${Environment}/*
            Condition:
              IpAddress:
                aws:SourceIp:
                  - '187.74.132.211/32'
          - Sid: WriteFromLambdaRole
            Effect: Allow
            Principal:
              AWS: !GetAtt CompanyLambdaRole.Arn   # ajuste o Logical ID da Role da sua função
            Action:
              - es:*
            Resource: !Sub arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/ahocultural-${Environment}/*
  
  ## Company
  CompanyQueueDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub 'ahocultural-companies-index-${Environment}-dlq'
  CompanyQueue:
    Type: AWS::SQS::Queue
    DependsOn:
      - CompanyQueueDLQ
    Properties:
      QueueName: !Sub 'ahocultural-companies-index-${Environment}'
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt CompanyQueueDLQ.Arn
        maxReceiveCount: 2
      VisibilityTimeout: 30
      DelaySeconds: 3
  CompanyQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    DependsOn:
      - CompanyQueue
    Properties:
      PolicyDocument: 
        Version: '2012-10-17'
        Statement:
          Effect: Allow
          Principal: "*"
          Action: 
            - SQS:SendMessage
            - SQS:GetQueueAttributes
          Resource: !GetAtt CompanyQueue.Arn
          Condition: 
            ArnEquals:
              aws:SourceArn: !Ref CompanyNotifier
      Queues:
        - !GetAtt CompanyQueue.QueueName
  CompanyNotifier:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub 'ahocultural-companies-index-${Environment}'
  CompanyNotifierSubscription:
    Type: 'AWS::SNS::Subscription'
    Properties:
      TopicArn: !Ref CompanyNotifier
      Endpoint: !GetAtt CompanyQueue.Arn
      Protocol: sqs
      RawMessageDelivery: true
  CompanyLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .dist/
      Handler: company/app.lambdaHandler
      Runtime: nodejs22.x
      Environment:
        Variables:
          BUCKET_DATABASE: !Sub ahocultural-database-${Environment}
          OPENSEARCH_ENDPOINT: !GetAtt OpenSearchDomain.DomainEndpoint
          COMPANY_INDEX: companies
      Policies: 
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - Statement:
          - Sid: CompanyLambdaIngestorOpenSearch
            Effect: Allow
            Action: 
              - es:*
            Resource:
              !Sub arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/ahocultural-${Environment}*
        - Statement:
            - Sid: CompanyLambdaS3Admin
              Effect: Allow
              Action:
                - s3:GetObject
                - s3:GetObjectTagging
                - s3:PutObject
                - s3:PutObjectTagging
                - s3:DeleteObject
                - s3:DeleteObjectTagging
                - s3:ListBucket
              Resource: 
                - !Sub 'arn:aws:s3:::ahocultural-database-${Environment}'
                - !Sub 'arn:aws:s3:::ahocultural-database-${Environment}/*'
        - Statement:
          - Sid: CompanyLambdaSQSPermissions
            Effect: Allow
            Action:
              - sqs:ReceiveMessage
              - sqs:DeleteMessage
              - sqs:GetQueueAttributes
              - sqs:ChangeMessageVisibility
              - sqs:GetQueueUrl
            Resource: !GetAtt CompanyQueue.Arn
  CompanyLambdaTrigger:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 1
      Enabled: true
      EventSourceArn: !GetAtt CompanyQueue.Arn
      FunctionName: !Ref CompanyLambda

  ## Category
  CategoryQueueDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub 'ahocultural-categories-index-${Environment}-dlq'
  CategoryQueue:
    Type: AWS::SQS::Queue
    DependsOn:
      - CategoryQueueDLQ
    Properties:
      QueueName: !Sub 'ahocultural-categories-index-${Environment}'
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt CategoryQueueDLQ.Arn
        maxReceiveCount: 2
      VisibilityTimeout: 30
      DelaySeconds: 3
  CategoryQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    DependsOn:
      - CategoryQueue
    Properties:
      PolicyDocument: 
        Version: '2012-10-17'
        Statement:
          Effect: Allow
          Principal: "*"
          Action: 
            - SQS:SendMessage
            - SQS:GetQueueAttributes
          Resource: !GetAtt CategoryQueue.Arn
          Condition: 
            ArnEquals:
              aws:SourceArn: !Ref CategoryNotifier
      Queues:
        - !GetAtt CategoryQueue.QueueName
  CategoryNotifier:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub 'ahocultural-categories-index-${Environment}'
  CategoryNotifierSubscription:
    Type: 'AWS::SNS::Subscription'
    Properties:
      TopicArn: !Ref CategoryNotifier
      Endpoint: !GetAtt CategoryQueue.Arn
      Protocol: sqs
      RawMessageDelivery: true
  CategoryLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .dist/
      Handler: category/app.lambdaHandler
      Runtime: nodejs22.x
      Environment:
        Variables:
          BUCKET_DATABASE: !Sub ahocultural-database-${Environment}
          OPENSEARCH_ENDPOINT: !GetAtt OpenSearchDomain.DomainEndpoint
          CATEGORY_INDEX: categories
      Policies: 
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - Statement:
          - Sid: CategoryLambdaIngestorOpenSearch
            Effect: Allow
            Action: 
              - es:*
            Resource:
              !Sub arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/ahocultural-${Environment}*
        - Statement:
            - Sid: CategoryLambdaS3Admin
              Effect: Allow
              Action:
                - s3:GetObject
                - s3:GetObjectTagging
                - s3:PutObject
                - s3:PutObjectTagging
                - s3:DeleteObject
                - s3:DeleteObjectTagging
                - s3:ListBucket
              Resource: 
                - !Sub 'arn:aws:s3:::ahocultural-database-${Environment}'
                - !Sub 'arn:aws:s3:::ahocultural-database-${Environment}/*'
        - Statement:
          - Sid: CategoryLambdaSQSPermissions
            Effect: Allow
            Action:
              - sqs:ReceiveMessage
              - sqs:DeleteMessage
              - sqs:GetQueueAttributes
              - sqs:ChangeMessageVisibility
              - sqs:GetQueueUrl
            Resource: !GetAtt CategoryQueue.Arn
  CategoryLambdaTrigger:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 1
      Enabled: true
      EventSourceArn: !GetAtt CategoryQueue.Arn
      FunctionName: !Ref CategoryLambda

  ## Location
  LocationQueueDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub 'ahocultural-locations-index-${Environment}-dlq'
  LocationQueue:
    Type: AWS::SQS::Queue
    DependsOn:
      - LocationQueueDLQ
    Properties:
      QueueName: !Sub 'ahocultural-locations-index-${Environment}'
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt LocationQueueDLQ.Arn
        maxReceiveCount: 2
      VisibilityTimeout: 30
      DelaySeconds: 3
  LocationQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    DependsOn:
      - LocationQueue
    Properties:
      PolicyDocument: 
        Version: '2012-10-17'
        Statement:
          Effect: Allow
          Principal: "*"
          Action: 
            - SQS:SendMessage
            - SQS:GetQueueAttributes
          Resource: !GetAtt LocationQueue.Arn
          Condition: 
            ArnEquals:
              aws:SourceArn: !Ref LocationNotifier
      Queues:
        - !GetAtt LocationQueue.QueueName
  LocationNotifier:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub 'ahocultural-locations-index-${Environment}'
  LocationNotifierSubscription:
    Type: 'AWS::SNS::Subscription'
    Properties:
      TopicArn: !Ref LocationNotifier
      Endpoint: !GetAtt LocationQueue.Arn
      Protocol: sqs
      RawMessageDelivery: true
  LocationLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .dist/
      Handler: location/app.lambdaHandler
      Runtime: nodejs22.x
      Environment:
        Variables:
          BUCKET_DATABASE: !Sub ahocultural-database-${Environment}
          OPENSEARCH_ENDPOINT: !GetAtt OpenSearchDomain.DomainEndpoint
          LOCATION_INDEX: locations
      Policies: 
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - Statement:
          - Sid: LocationLambdaIngestorOpenSearch
            Effect: Allow
            Action: 
              - es:*
            Resource:
              !Sub arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/ahocultural-${Environment}*
        - Statement:
            - Sid: LocationLambdaS3Admin
              Effect: Allow
              Action:
                - s3:GetObject
                - s3:GetObjectTagging
                - s3:PutObject
                - s3:PutObjectTagging
                - s3:DeleteObject
                - s3:DeleteObjectTagging
                - s3:ListBucket
              Resource: 
                - !Sub 'arn:aws:s3:::ahocultural-database-${Environment}'
                - !Sub 'arn:aws:s3:::ahocultural-database-${Environment}/*'
        - Statement:
          - Sid: LocationLambdaSQSPermissions
            Effect: Allow
            Action:
              - sqs:ReceiveMessage
              - sqs:DeleteMessage
              - sqs:GetQueueAttributes
              - sqs:ChangeMessageVisibility
              - sqs:GetQueueUrl
            Resource: !GetAtt LocationQueue.Arn
  LocationLambdaTrigger:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 1
      Enabled: true
      EventSourceArn: !GetAtt LocationQueue.Arn
      FunctionName: !Ref LocationLambda

  ## Article
  ArticleQueueDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub 'ahocultural-articles-index-${Environment}-dlq'
  ArticleQueue:
    Type: AWS::SQS::Queue
    DependsOn:
      - ArticleQueueDLQ
    Properties:
      QueueName: !Sub 'ahocultural-articles-index-${Environment}'
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt ArticleQueueDLQ.Arn
        maxReceiveCount: 2
      VisibilityTimeout: 30
      DelaySeconds: 3
  ArticleQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    DependsOn:
      - ArticleQueue
    Properties:
      PolicyDocument: 
        Version: '2012-10-17'
        Statement:
          Effect: Allow
          Principal: "*"
          Action: 
            - SQS:SendMessage
            - SQS:GetQueueAttributes
          Resource: !GetAtt ArticleQueue.Arn
          Condition: 
            ArnEquals:
              aws:SourceArn: !Ref ArticleNotifier
      Queues:
        - !GetAtt ArticleQueue.QueueName
  ArticleNotifier:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub 'ahocultural-articles-index-${Environment}'
  ArticleNotifierSubscription:
    Type: 'AWS::SNS::Subscription'
    Properties:
      TopicArn: !Ref ArticleNotifier
      Endpoint: !GetAtt ArticleQueue.Arn
      Protocol: sqs
      RawMessageDelivery: true
  ArticleLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .dist/
      Handler: article/app.lambdaHandler
      Runtime: nodejs22.x
      Environment:
        Variables:
          BUCKET_DATABASE: !Sub ahocultural-database-${Environment}
          OPENSEARCH_ENDPOINT: !GetAtt OpenSearchDomain.DomainEndpoint
          ARTICLE_INDEX: articles
      Policies: 
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - Statement:
          - Sid: ArticleLambdaIngestorOpenSearch
            Effect: Allow
            Action: 
              - es:*
            Resource:
              !Sub arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/ahocultural-${Environment}*
        - Statement:
            - Sid: ArticleLambdaS3Admin
              Effect: Allow
              Action:
                - s3:GetObject
                - s3:GetObjectTagging
                - s3:PutObject
                - s3:PutObjectTagging
                - s3:DeleteObject
                - s3:DeleteObjectTagging
                - s3:ListBucket
              Resource: 
                - !Sub 'arn:aws:s3:::ahocultural-database-${Environment}'
                - !Sub 'arn:aws:s3:::ahocultural-database-${Environment}/*'
        - Statement:
          - Sid: ArticleLambdaSQSPermissions
            Effect: Allow
            Action:
              - sqs:ReceiveMessage
              - sqs:DeleteMessage
              - sqs:GetQueueAttributes
              - sqs:ChangeMessageVisibility
              - sqs:GetQueueUrl
            Resource: !GetAtt ArticleQueue.Arn
  ArticleLambdaTrigger:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 1
      Enabled: true
      EventSourceArn: !GetAtt ArticleQueue.Arn
      FunctionName: !Ref ArticleLambda