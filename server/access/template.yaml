AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Sample SAM Template for Access Endpoints

Mappings:
    EnvironmentMap:
      qa:
        ApiGatewayId: bjomeyg8y0
        V1Resource: mbsw8v
        JwtSecretHash: b63e00f0d6a7c482cc73b6ec7bb93b95c90f45e98c63f6b0d71cb0dcd2480d89db7cf72505c3ad1d49d2e33a7b4e3246
        JwtExpirationTime: 14400
      prod:
        ApiGatewayId: '1111'
        V1Resource: '1111'
        JwtSecretHash: c6e88f6e2f0d05fa96c8307e56eb2a3b073f71d2d2c774187aae109f1d7edbfa987c05f27c4df4030e2514e51a7e21b5
        JwtExpirationTime: 14400
Parameters:
  Environment:
    Description: Environment where stack will be deployed
    Type: String
    AllowedValues:
    - qa
    - prod

Globals:
  Function:
    Timeout: 5
    MemorySize: 256

Resources:
  AccessResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !FindInMap [EnvironmentMap, !Ref 'Environment', ApiGatewayId]
      ParentId: !FindInMap [EnvironmentMap, !Ref 'Environment', V1Resource]
      PathPart: access
  AccessOptions:
    Type: 'AWS::ApiGateway::Method'
    Properties: 
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      RestApiId: !FindInMap [EnvironmentMap, !Ref 'Environment', ApiGatewayId]
      ResourceId: !Ref AccessResource
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
      Integration:
        IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'*'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
          ResponseTemplates:
            application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK

  ## Authenticate
  AuthenticationResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !FindInMap [EnvironmentMap, !Ref 'Environment', ApiGatewayId]
      ParentId: !Ref AccessResource
      PathPart: authenticate
  AuthenticationLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .dist/
      Handler: authentication/app.lambdaHandler
      Runtime: nodejs22.x
      Environment:
        Variables:
          BUCKET_DATABASE: !Sub ahocultural-database-${Environment}
          JWT_SECRET: !FindInMap [EnvironmentMap, !Ref 'Environment', JwtSecretHash]
          JWT_EXPIRES_IN: !FindInMap [EnvironmentMap, !Ref 'Environment', JwtExpirationTime]
      Policies: 
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - Statement:
            - Sid: AuthenticationLambdaS3Access
              Effect: Allow
              Action:
                - s3:GetObject
                - s3:GetObjectTagging
                - s3:PutObject
                - s3:PutObjectTagging
                - s3:DeleteObject
                - s3:DeleteObjectTagging
                - s3:ListBucket
              Resource: 
                - !Sub 'arn:aws:s3:::ahocultural-database-${Environment}'
                - !Sub 'arn:aws:s3:::ahocultural-database-${Environment}/*'
  AuthenticationTrigger:
      Type: 'AWS::Lambda::Permission'
      Properties:
        Action: 'lambda:invokeFunction'
        FunctionName: !Ref AuthenticationLambda
        Principal: apigateway.amazonaws.com
        SourceArn: !Sub 
          - arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayId}/*/POST/v1/access/authenticate
          - ApiGatewayId: !FindInMap [EnvironmentMap, !Ref 'Environment', ApiGatewayId]
  AuthenticationPostMethod:
    DependsOn: 
      - AuthenticationTrigger
    Type: 'AWS::ApiGateway::Method'
    Properties: 
      AuthorizationType: NONE
      HttpMethod: POST
      ResourceId: !Ref AuthenticationResource
      RestApiId: !FindInMap [EnvironmentMap, !Ref 'Environment', ApiGatewayId]
      MethodResponses:
        - StatusCode: 200
        - StatusCode: 204
        - StatusCode: 302
        - StatusCode: 400
        - StatusCode: 401
        - StatusCode: 500
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
          - LambdaArn: !GetAtt AuthenticationLambda.Arn
  AuthenticationOptionsMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      ResourceId: !Ref AuthenticationResource
      RestApiId: !FindInMap [EnvironmentMap, !Ref 'Environment', ApiGatewayId]
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'*'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Headers: true


  ## Authorization
  AuthorizationLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .dist/
      Handler: authorization/app.lambdaHandler
      Runtime: nodejs22.x
      Environment:
        Variables:
          BUCKET_DATABASE: !Sub ahocultural-database-${Environment}
          JWT_SECRET: !FindInMap [EnvironmentMap, !Ref 'Environment', JwtSecretHash]
          JWT_EXPIRES_IN: !FindInMap [EnvironmentMap, !Ref 'Environment', JwtExpirationTime]
      Policies:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  AuthorizationTrigger:
      Type: 'AWS::Lambda::Permission'
      Properties:
        Action: 'lambda:invokeFunction'
        FunctionName: !Ref AuthorizationLambda
        Principal: apigateway.amazonaws.com
        SourceArn: !Sub 
          - arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayId}/authorizers/*
          - ApiGatewayId: !FindInMap [EnvironmentMap, !Ref 'Environment', ApiGatewayId]
  JwtAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      Name: JwtAuthorizer
      Type: TOKEN
      IdentitySource: method.request.header.Authorization
      RestApiId: !FindInMap [EnvironmentMap, !Ref Environment, ApiGatewayId]
      AuthorizerUri:
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AuthorizationLambda.Arn}/invocations
      AuthorizerResultTtlInSeconds: 0

  ## Register
  RegisterResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !FindInMap [EnvironmentMap, !Ref 'Environment', ApiGatewayId]
      ParentId: !Ref AccessResource
      PathPart: register
  RegisterLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .dist/
      Handler: register/app.lambdaHandler
      Runtime: nodejs22.x
      Environment:
        Variables:
          BUCKET_DATABASE: !Sub ahocultural-database-${Environment}
      Policies: 
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - Statement:
            - Sid: RegisterLambdaS3Access
              Effect: Allow
              Action:
                - s3:GetObject
                - s3:GetObjectTagging
                - s3:PutObject
                - s3:PutObjectTagging
                - s3:DeleteObject
                - s3:DeleteObjectTagging
                - s3:ListBucket
              Resource: 
                - !Sub 'arn:aws:s3:::ahocultural-database-${Environment}'
                - !Sub 'arn:aws:s3:::ahocultural-database-${Environment}/*'
  RegisterTrigger:
      Type: 'AWS::Lambda::Permission'
      Properties:
        Action: 'lambda:invokeFunction'
        FunctionName: !Ref RegisterLambda
        Principal: apigateway.amazonaws.com
        SourceArn: !Sub 
          - arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayId}/*/POST/v1/access/register
          - ApiGatewayId: !FindInMap [EnvironmentMap, !Ref 'Environment', ApiGatewayId]
  RegisterPostMethod:
    DependsOn: 
      - RegisterTrigger
    Type: 'AWS::ApiGateway::Method'
    Properties: 
      AuthorizationType: NONE
      HttpMethod: POST
      ResourceId: !Ref RegisterResource
      RestApiId: !FindInMap [EnvironmentMap, !Ref 'Environment', ApiGatewayId]
      MethodResponses:
        - StatusCode: 200
        - StatusCode: 204
        - StatusCode: 302
        - StatusCode: 400
        - StatusCode: 401
        - StatusCode: 500
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
          - LambdaArn: !GetAtt RegisterLambda.Arn

  ## Deployment
  ApiGatewayDeployment:
      Type: 'AWS::ApiGateway::Deployment'
      DependsOn:
        - AuthenticationPostMethod
        - AuthenticationOptionsMethod
        - RegisterPostMethod
      Properties:
        RestApiId: !FindInMap [EnvironmentMap, !Ref 'Environment', ApiGatewayId]
        StageName: !Ref Environment