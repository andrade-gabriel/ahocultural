AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Sample SAM Template for Admin Endpoints

Mappings:
    EnvironmentMap:
      qa:
        ApiGatewayId: bjomeyg8y0
        V1Resource: mbsw8v
        OpenSearchDomain: search-ahocultural-qa-2o6wra2alh6cjmp6ycl5nzgpvy.us-east-1.es.amazonaws.com
      prod:
        ApiGatewayId: '1111'
        V1Resource: '1111'
        OpenSearchDomain: '1111'
Parameters:
  Environment:
    Description: Environment where stack will be deployed
    Type: String
    AllowedValues:
    - qa
    - prod

Globals:
  Function:
    Timeout: 5
    MemorySize: 256

Resources:
  AdminResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !FindInMap [EnvironmentMap, !Ref 'Environment', ApiGatewayId]
      ParentId: !FindInMap [EnvironmentMap, !Ref 'Environment', V1Resource]
      PathPart: admin

  ## Company
  CompanyResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !FindInMap [EnvironmentMap, !Ref 'Environment', ApiGatewayId]
      ParentId: !Ref AdminResource
      PathPart: company
  CompanyIdResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !FindInMap [EnvironmentMap, !Ref Environment, ApiGatewayId]
      ParentId:  !Ref CompanyResource
      PathPart: '{id}'
  CompanyLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/
      Handler: company/app.lambdaHandler
      Runtime: nodejs22.x
      Environment:
        Variables:
          BUCKET_DATABASE: !Sub ahocultural-database-${Environment}
          COMPANY_NOTIFIER: !Sub arn:aws:sns:${AWS::Region}:${AWS::AccountId}:ahocultural-companies-index-${Environment}
          OPENSEARCH_ENDPOINT: !FindInMap [EnvironmentMap, !Ref Environment, OpenSearchDomain]
          COMPANY_INDEX: companies
      Policies: 
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - Statement:
          - Sid: CompanyLambdaIngestorOpenSearch
            Effect: Allow
            Action: 
              - es:*
            Resource:
              !Sub arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/ahocultural-${Environment}*
        - Statement:
            - Sid: CompanyLambdaS3Admin
              Effect: Allow
              Action:
                - s3:GetObject
                - s3:GetObjectTagging
                - s3:PutObject
                - s3:PutObjectTagging
                - s3:DeleteObject
                - s3:DeleteObjectTagging
                - s3:ListBucket
              Resource: 
                - !Sub 'arn:aws:s3:::ahocultural-database-${Environment}'
                - !Sub 'arn:aws:s3:::ahocultural-database-${Environment}/*'
        - Statement:
            - Sid: CompanyLambdaSnsAdmin
              Effect: Allow
              Action:
                - sns:Publish
              Resource:
                - !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:ahocultural-companies-index-${Environment}'
  CompanyTrigger:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:invokeFunction'
      FunctionName: !Ref CompanyLambda
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 
        - arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayId}/*/*/v1/admin/company*
        - ApiGatewayId: !FindInMap [EnvironmentMap, !Ref 'Environment', ApiGatewayId]
  CompanyGetByIdMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      ResourceId: !Ref CompanyIdResource
      RestApiId: !FindInMap [EnvironmentMap, !Ref Environment, ApiGatewayId]
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CompanyLambda.Arn}/invocations
      MethodResponses:
        - StatusCode: 200
        - StatusCode: 404
        - StatusCode: 400
        - StatusCode: 401
        - StatusCode: 500
  CompanyGetMethod:
    DependsOn: 
      - CompanyTrigger
    Type: 'AWS::ApiGateway::Method'
    Properties: 
      AuthorizationType: NONE
      HttpMethod: GET
      ResourceId: !Ref CompanyResource
      RestApiId: !FindInMap [EnvironmentMap, !Ref 'Environment', ApiGatewayId]
      MethodResponses:
        - StatusCode: 200
        - StatusCode: 204
        - StatusCode: 302
        - StatusCode: 400
        - StatusCode: 401
        - StatusCode: 500
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
          - LambdaArn: !GetAtt CompanyLambda.Arn
  CompanyPostMethod:
    DependsOn: 
      - CompanyTrigger
    Type: 'AWS::ApiGateway::Method'
    Properties: 
      AuthorizationType: NONE
      HttpMethod: POST
      ResourceId: !Ref CompanyResource
      RestApiId: !FindInMap [EnvironmentMap, !Ref 'Environment', ApiGatewayId]
      MethodResponses:
        - StatusCode: 200
        - StatusCode: 204
        - StatusCode: 302
        - StatusCode: 400
        - StatusCode: 401
        - StatusCode: 500
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
          - LambdaArn: !GetAtt CompanyLambda.Arn
  CompanyPatchMethod:
    DependsOn: 
      - CompanyTrigger
    Type: 'AWS::ApiGateway::Method'
    Properties: 
      AuthorizationType: NONE
      HttpMethod: PATCH
      ResourceId: !Ref CompanyIdResource
      RestApiId: !FindInMap [EnvironmentMap, !Ref 'Environment', ApiGatewayId]
      MethodResponses:
        - StatusCode: 200
        - StatusCode: 204
        - StatusCode: 302
        - StatusCode: 400
        - StatusCode: 401
        - StatusCode: 500
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
          - LambdaArn: !GetAtt CompanyLambda.Arn
  
  ## Deployment
  ApiGatewayDeployment:
      Type: 'AWS::ApiGateway::Deployment'
      DependsOn:
        - CompanyGetMethod
        - CompanyPostMethod
        - CompanyPatchMethod
      Properties:
        RestApiId: !FindInMap [EnvironmentMap, !Ref 'Environment', ApiGatewayId]
        StageName: !Ref Environment